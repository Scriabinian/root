-- 12월 13일 수업내용
-- round, truncate
-- round : 반올림
-- truncate : 특정 자리수 버림
-- dual : 가상 테이블(연습용)
select round(500.8) from dUAl
-- 4번째 소수점 반올림
select round(500.567890, 4) from dual
-- 특정 소수점 이하를 버림
select truncate(1234.567898, 1) from dual
-- 실무에서 round와 truncate는 자주 사용하지 않는다.
-- if
-- 만약 sal이 3천 이하면 A를 출력하고, 초과면 B를 출력해줘.
select if(sal<= 3000, 'a', 'b'), sal from emp
-- switch case
select case when(sal between 1000 and 2000) then 'A' when (sal between 3000 and 5000) then 'B' else 'C' end, sal from emp




-- if, switch문 실무에서 잘 사용 안합니다

-- 현재시각 출력하기.
select date_format(now(), '%Y-%m-%d') as '오늘은?' from dual
select now() from emp

-- join
-- 조인은 n개의 테이블을 서로 묶어서 하나의 결과를 만들어 내는 것을 의미.
-- 즉, dept과 emp을 묶어서 결과를 조회하고 싶을 때 join을 사용.
-- 테이블을 한개로 관리하면 컬럼 수가 늘어나고, 이는 데이터베이스 성능 저하로 이어짐.
-- 실무에선 여러 테이블을 나누어 관리하며, join을 이용해 테이블을 묶는다.
-- 이는 ***** 관계형데이터베이스(RDBMS) == mySQL의 큰 특징 중 하나 ㅎ ㅅㅎ.
-- 번외) join이 있으면 관계형데이터베이스(mySQL, oracle...  join이 없으면 noSQL(MongoDB, DynamoDB)!
-- join을 하려면 교집합 컬럼을 찾아야 함. ㅎ ㅅㅎ
-- 부서테이블에서 부서번호 조회.
select deptno from dept
-- 사원테이블에서 부서번호 조회.
select deptno from emp
-- 사원들의 부서이름과 근무지 조회.
-- 부서 이름과 근무지는 dept 테이블에 존재.
-- deptno를 이용해서 테이블을 묶을 예정 ㅎ ㅅㅎ.
select 
	e.ename as '사원 이름',
	e.job as '사원 직책',
	d.dname as '부서이름',
	d.loc as '근무지',
	e.deptno as '부서번호'
from emp as e
inner join dept as d
on e.deptno = d.deptno
-- inner join 과 on 도 from 절에 속한당.
-- from (inner join, on)-> where -> group by...
-- 교집합 컬럼(deptno)은(는) 이름만 같다고 join이 되는게 아닌, 데이터타입이 같아야함.
-- emp에 있는 deptno와 dept에 있는 deptno는 데이터타입이 같다.
-- 문제1. 부서번호가 10번인 사원들의 이름, 입사날짜, 부서이름 조회
select ename, hiredate, job from emp where deptno = 10

-- 문제2. job이 manager인 사원의 번호, 근무지 조회
select e.empno, d.loc from emp as e inner join dept as d on e.deptno = d.deptno

-- 문제3. 급여가 2000이상인 사원의 번호, 이름, 부서번호, 부서이름, 근무지 조회.
select e.empno, e.ename, e.deptno, d.dname, d.loc from emp as e inner join dept as d on e.deptno = d.DEPTNO 
-- inner join(내부조인, 실무에선 조인이라고함)
-- self join
-- emp 테이블에 사수번호 mgr와 사원번호는 교집함
-- from 먼저 실행하기 때문에 select절에 from절에 사용한 별칭 사용 가능.
select
	busasu.empno as '부사수 사원번호',
	busasu.ename as '부사수 이름',
	sasu.empno as '사수 사원번호',
	sasu.ename as '사수 이름'	
from emp as busasu
inner join emp as sasu
on busasu.mgr = sasu.empno
-- 문제1. 사원 보너스가 null이 아닌 사원이름, 사원의 사수이름 조회
select 
	busasu.ename,
	sasu.ename
from emp as busasu inner join emp as sasu on busasu.mgr = sasu.empno where busasu.comm is not null
-- 문제2. 부서번호(부사수)가 20번인 사원의 사원번호, 사원이름, 사수이름 조회.
select 
	busasu.empno,
	busasu.ename,
	sasu.ename
from emp as busasu
inner join emp as sasu
on busasu.mgr = sasu.empno
where busasu.deptno = 20
-- self join, inner join
-- ***여러 join 사용하기;;
-- 부사수 이름, 부서번호, 부서이름, 사수 이름 조회.
-- join을 총 2번 사용함 ㅎ ㅅㅎ.
select 
	busasu.ename as '부사수 이름',
	busasu.deptno as '부사수 부서번호',
	d.dname as '부사수 부서이름',
	sasu.ename as '사수 이름'
from emp as busasu 
inner join dept as d
on busasu.deptno = d.deptno
inner join emp as sasu
on busasu.mgr = sasu.empno
-- inner join(여러 테이블 조인), self join(한 테이블에서 조인)
-- ***** 실무에서 상당히 많이 사용하는 조인
-- right join, left join -> 이 둘을 아우터 조인이라고 함.
-- 대형 SI 프로젝트에서 외부조인(아우터조인)을 정~~~~말 많이 사용함.
-- 문법
-- select 컬럼이름 from 테이블이름 as 별칭 right join 테이블 이름 as 별칭 on 별칭,컬럼, 별칭,컬럼
-- select 컬럼이름 from 테이블이름 as 별칭 left join 테이블 이름 as 별칭 on 별칭,컬럼, 별칭,컬럼

-- 언제 사용할까.
select deptno from dept

-- diestinct = 중복제거
-- distinct와 group by
-- group by = 컬럼 그룹핑(중복 제거)
-- 차이점 ? group by는 그룹핑 후 정렬함, distinct는 중복제거만 함.
select distinct deptno from emp
-- 요구사항 -> emp와 deptno 조인할 때 40번 부서도 이름과 위치를 알고 싶다!
-- 이럴 때 아우터 조인을 사용함.
select 
	e.ename as '사원 번호',
	d.dname as '부서 이름',
	d.deptno as '부서 번호'
from emp as e right join dept as d
on e.deptno = d.deptno
where e.ename is null
select
	e.ename as '사원 번호',
	d.dname as '부서 이름',
	d.deptno as '부서 번호'
from dept d left join emp as e
on e.deptno = d.deptno
-- 위 조인상태에서 40번 부서만 출력하기.