@라이브러리
클래스 100개를 파일별로 관리하기보다는 기능별로 압축파일로 생성해서 사용하는 방식이당.
일반적으로 JAR. 클래스와 인터페이스의 바이트코드파일( .class)을 압축한다.
압축할 수 있는 방법
-콘솔(명령) 프로그램 실행.
-이클립스 Build path;

@라이브러리 만드는 방법
1)프로젝트 만들기 : my lib
 패키지1/패키지2 : A.class/B.class

2)압축할 수 있는 폴더 만들기.
 src같은 depth < dist(jar 파일 생성)

3)새로운 프로젝트를 만들기 > jar 압축 해제.
my_application 프로젝트 만들깅.
src>app(패키지)>main.java(main method() 호출방식)
4) main_method() 실행 : my_lib.jar
import해서  A.class B.class 메소드 출력.

1)이클립스 해제 방식.

2)콘솔창에 명령어로 해제하는 방식.
File > Buildpath > ConfigureBuild >라이브러리 > classes
2)콘솔창(cmd)에 명령어로 해제하는 방식.

my_application > app > 명령어 콘솔로 찍어서 출력 ㅎ ㅅㅎ.

@모듈화 방식
자바 9버전부터 지원하는 방식.
모듈은 패키지 관리기능까지 포함된 모든 패키지에 외부프로그램에서 접근이 가능하지만 모듈은 은닉하여서 접근할 수 없게 만들수도 있당.
패키지를 모두 사용할 필요가 없고 은닉할 패키지를 선택해서 구현할 수 있당.

1)모듈 기술자(module-info.java) 모듈간의 의존관계를 만든당.
모듈A(후로젝트1)->모듈B(프로젝트2)->모듈3(프로젝트3)...

2)module-info.java  파일이 존재하면 모듈이라고 생각한다.

모듈도 라이브러리와 같이 배포하고 사용할 수 있당.

3)대규모 응용프로그램은 기능별 모듈화 시켜서 개발시키고 있다.
재사용성과 유지보수 차원에서 모듈화 패킹이 필요하다.

-프로젝트 방식                                                        
-Jar파일 압축 해제 방식.

                                                                            @예외처리
에러 : 하드웨어 고장으로 인해 응용프로그램이 실행 오류 발생.
외부적인 상황으로 코드랑은 상관없이 고장이 생기는 환경.(개발자로 대체할 수 없다.)
-인터럽트/입출력/메모리고장.
예외 : 개발자의 잘못된 코딩으로 인해서 발생하는 에러를 말한다. 예외가 발생하면 프로그램은 곧바로 종료된당.
일반예외 : 컴파일러가 무조건 예외처리 검사하는 방식.  
1.자바 컴파일러가 명시적으로 블록을 꼭 사용해서 요구하는 예외상황. 선택 X 무조건 처리.

실행예외 : 컴파일러가 예외처리 코드 여부를 검사하지 않는 방식(try-catch-finally):선택
*예외처리 : 클래스로 구성되어 있어요.
-NullPointerException : 객체 인스턴스를 생성했는데 메모리가 없는경우.
-NumberFormatException : 잘못된 형변환(정수/실수단위로 달라지는 부분.) 
-ArrayIndexOutofBoundesException : 배열의 범위가 없는데 배열의 주소를 초과해서 발생하는 오류. 
일반예외 > Exception > throwable 상속 받아 만들어짐.
실행예외 > RuntimeException > throwable 상속 받아 만들어진다.

@예외처리 문법
예외가 발생되었을때 갑작스러운 종료를 막고자 내부에서 처리하는 코드이당.
1)예외 미처리
코드 진행 에러 발생.> JVM(자바 가상머신) 예외 클래스를 생성한다. > 예외 객체 발생지점으로 호출 처리.(try-catch) > 비정상 오류.

2)예외 처리하기
 try{//에러가 발생할 가능성이 있는 지점.
}catch(Exception e){
//예외 처리 코드로 예외 로그를 심어놓음.
e.printstack();
}finally{
//항상 실행되는 코드 ㅎ ㅅㅎ.
}

@일반 예외 소스 코드(컴파일러시 무조건 try-catch)
-IOException : 입출력 에러 코드로 확인 할 수 있당.
@실행 예외 소스 코드(컴파일시 try-catch)

@다중 catch 사용하기
프로그램 처리시 에러발생이 여러개 날 경우 있당.
다중 catch문을 이용해서 예외별 예외처리 코드를 다양하게 만들 수 있당.

@printStackTrace() getMessage()
예외 클래스 인스턴스 발생한 예외의 정보가 담겨있다.
-printStafckTrace()
예외 발생 당시에 호출 스택 있었던 메서드의 정보와 예외 메시지를 화면에 출력

-getMessage()
발생한 예외 클래스의 인스턴에 저장된 메시지를 얻는다.

@예외 발생 시키기

키워드  (예약어)throw 사용해서 프로그래머가 고의로 예외를 발생시키는 상황이당.
해당 메서드를 사용하는쪽 처리할 수 있게 미루는 방식 코드이다.
유지보수 부분과 호출하는 쪽에서 수월하게 처리하는 방법을 선호해서 만든 방식이당.

문제 1: 예외 던지기 기본문제;
문제1 : 예외던지기 교재 369쪽 (호출한 곳에서 예외처리)
-메서드가 호출될 때 호출된 메서드에서 예외처리를 떠안고 출력하는 방식.